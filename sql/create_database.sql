-- types
create type expertise as enum ('beginner','intermediate','expert');
create type area_of_work as enum ('sales', 'engineering', 'marketing', 'design');
create type visibility as enum ('private','public');
create type remote_level as enum ('none','hybrid','full');
create type job_status as enum ('posted','cancelled','current','completed');
create type length as enum ('small','short','medium','long');
create type proposal_status as enum ('cancelled','rejected','sent', 'accepted');

-- tables
create table public.users (
  user_id uuid references auth.users not null primary key,
  email timestamp with time zone,
  first_name text,
  last_name text
);

create table public.freelancers (
  freelancer_id bigint generated by default as identity primary key,
  user_id uuid references public.users not null,
  hourly_rate int not null,
  bio text, 
  headline text not null, 
  location text not null, 
  timezone text, 
  linkedin text, 
  github text, 
  years_of_experience int default 0, 
  expertise_level expertise default 'beginner',
  skills text[],
  area_of_work area_of_work,
  visibility visibility,
  availability_per_week int,
  time_available int check (time_available between 0 and 24),
  website text
);

create table public.employers (
  employer_id bigint generated by default as identity primary key,
  user_id uuid references public.users not null,
  hourly_budget int not null,
  bio text, 
  name text not null, 
  location text not null, 
  timezone text, 
  linkedin text, 
  time_available int not null check (time_available between 0 and 24),
  website text,
  policies text[]
);

create table public.jobs (
  job_id bigint generated by default as identity primary key,
  employer_id bigint references public.employers not null,
  freelancer_id bigint references public.freelancers,
  status job_status not null,
  length length,
  skills text[],
  area_of_work area_of_work,
  remote_level remote_level,
  title text not null, 
  is_hourly boolean, 
  max_cents_per_hour int, 
  full_price int,
  location text not null,
  description text not null,
  time_posted bigint not null
);

create table public.proposals (
  proposal_id bigint generated by default as identity primary key,
  job_id bigint references public.jobs not null,
  employer_id bigint references public.employers not null,
  freelancer_id bigint references public.freelancers not null,
  proposal proposal_status not null,
  subject_line text not null, 
  content text not null, 
  cents_per_hour int, 
  full_price int,
  time_sent bigint not null,
  was_edited boolean not null default false
);

create table public.reviews (
  review_id bigint generated by default as identity primary key,
  job_id bigint references public.jobs not null,
  employer_id bigint references public.employers not null,
  freelancer_id bigint references public.freelancers not null,
  content text, 
  number_of_stars int not null check (number_of_stars between 0 and 5),
  author_id uuid not null default auth.uid()
);

create table public.rooms (
  room_id bigint generated by default as identity primary key,
  participants uuid[] not null
);

create table public.messages (
  message_id bigint generated by default as identity primary key,
  room_id bigint references public.rooms not null,
  message text, 
  author_id uuid not null default auth.uid()
);

-- policies
alter table public.users
  enable row level security;

create policy "Users can view their own profile" on public.users
  for select using (auth.uid() = user_id);

create policy "Users can insert into their own profile." on public.users
  for insert with check (auth.uid() = user_id);

create policy "Users can update their own profile." on public.users
  for update using (auth.uid() = user_id);

alter table public.freelancers
  enable row level security;

create policy "Freelancers can view their own account" on public.freelancers
  for select using (auth.uid() = user_id);

create policy "Anyone can view a public account" on public.freelancers
  for select using (visibility = 'public');

create policy "Freelancers can insert into their own account." on public.freelancers
  for insert with check (auth.uid() = user_id);

create policy "Freelancers can update their own account." on public.freelancers
  for update using (auth.uid() = user_id);

create policy "Freelancers can delete their own account." on public.freelancers
  for delete using (auth.uid() = user_id);

alter table public.employers
  enable row level security;

create policy "Anyone can view an employer account" on public.employers
  for select using (true);

create policy "Employers can insert into their own account." on public.employers
  for insert with check (auth.uid() = user_id);

create policy "Employers can update their own account." on public.employers
  for update using (auth.uid() = user_id);

create policy "Employers can delete their own account." on public.employers
  for delete using (auth.uid() = user_id);

create policy "Anyone can view a posted job" on public.jobs
  for select using (status = 'posted');

create policy "Employers can view a job that they posted" on public.jobs
  for select using (
    employer_id = (
      select employer_id from public.employers
      where user_id  = auth.uid()
    )
  );

create policy "Employers can update a job that they posted" on public.jobs
  for update using (
    employer_id = (
      select employer_id from public.employers
      where user_id  = auth.uid()
    )
  );

create policy "Employers can post jobs" on public.jobs
  for insert with check (
    employer_id = (
      select employer_id from public.employers
      where user_id  = auth.uid()
    )
  );

create policy "Freelancers can view a job that they're listed on" on public.jobs
  for select using (
    freelancer_id = (
      select freelancer_id from public.freelancers
      where user_id  = auth.uid()
    )
  );

create policy "The employer can view a proposal" on public.proposals
  for select using (employer_id = (
      select employer_id from public.employers
      where user_id  = auth.uid()
    )
);

create policy "Freelancers can view proposals that they sent" on public.proposals
  for select using (
    freelancer_id = (
      select employer_id from public.employers
      where user_id  = auth.uid()
    )
  );

create policy "Freelancers can change proposals that they sent" on public.proposals
  for update using (
    freelancer_id = (
      select employer_id from public.employers
      where user_id  = auth.uid()
    )
  );

create policy "Freelancers can create new proposals" on public.proposals
  for insert with check (
    freelancer_id = (
      select employer_id from public.employers
      where user_id  = auth.uid()
    )
  );

create policy "Anyone can view a review" on public.reviews
  for select using (true);

create policy "Authors can create a new review" on public.reviews
  for insert with check (
    author_id = (auth.uid()) and (
    'completed' = (
      select status from public.jobs
      where public.jobs.job_id  = public.reviews.job_id
    )
    )
  );

alter table public.rooms
  enable row level security;

alter table public.messages
  enable row level security;

-- triggers and functions
-- automatically add users to the users table
create function public.handle_new_user()
returns trigger as
$$
  begin
    insert into public.profile (user_id)
    values (new.id);
    return new;
  end;
$$
language plpgsql security definer;

create trigger on_auth_user_created
  after insert on auth.users
  for each row
    execute procedure public.handle_new_user();
